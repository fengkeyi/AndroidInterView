package com.flutter.hybrid.androidinterview.optimization;


/***
 *TODO
 * 优化篇
 * 优化 1.0
 *      避免多次绘制背景，即如果父控件有颜色，也是自己需要的颜色，那么就不必在子控件加背景颜色
 *      避免绘制不必要的背景图层，即如果每个自控件的颜色不太一样，而且可以完全覆盖父控件，那么就不需要再父控件上加背景颜色
 *      避免多层嵌套，即尽量减少不必要的嵌套
 *      能用LinearLayout和FrameLayout，就不要用RelativeLayout，因为RelativeLayout控件相对比较复杂，测绘也想要耗时。
 *      技巧
 *          include可以提高布局的复用性
 *          merge的布局取决于父控件是哪个布局，结合include一起使用，减少嵌套层次
 *          ViewStub它可以按需加载，更加轻便
 *          ConstraintLayout可以有效地解决布局嵌套过多的问题（复杂界面可选择ConstraintLayout，可有效减少层级）
 *  绘制优化（View的绘制频率保证60fps是最佳的，这就要求每帧绘制时间不超过16ms(16ms = 1000/60)）
 *  优化 2.0
 *       1、 onDraw中不要创建新的局部对象：onDraw方法中不要做耗时的任务，也不做过多的循环操作，特别是嵌套循环，
 *              虽然每次循环耗时很小，但是大量的循环势必霸占CPU的时间片，从而造成View的绘制过程不流畅。
 *       2、 onDraw方法中不要做耗时的任务：onDraw()中不要创建新的局部对象，因为onDraw()方法一般都会频繁大量调用，
 *              就意味着会产生大量的临时对象，不仅占用过的内存，而且会导致系统更加频繁的GC，大大降低程序的执行速度和效率。
 *     java虚拟机GC策略：引用计数法，可达性分析法
 *  优化3.0 资源未关闭造成的内存泄漏（检测方法：leakcanary傻瓜式操作）
 *      网络、文件等流忘记关闭
 *      手动注册广播时，退出时忘记 unregisterReceiver()
 *      Service 执行完后忘记 stopSelf()
 *      EventBus 等观察者模式的框架忘记手动解除注册
 *  优化4.0：启动速度优化
 *      冷启动任务：1、加载并启动应用程序 2、启动后立即显示应用程序的空白启动窗口 3、创建应用程序进程
 *      白屏原因：Application启动时，空白的启动窗口将保留在屏幕上，直到系统首次完成绘制应用程序
 *      Activity#onCreate影响加载时间：复杂加载和膨胀视图，以及初始化活动运行所需的对象。
 *      1、利用提前展示出来的Window，快速展示出来一个界面，给用户快速反馈的体验；
 *          使用Activity的windowBackground主题属性来为启动的Activity提供一个简单的drawable
 *      2、避免在启动时做密集沉重的初始化（Heavy app initialization）；
 *          异步加载第三方库，懒加载
 *      3、避免I/O操作、反序列化、网络操作、布局嵌套等。
 *   优化5.0 微优化
 *      编写高效代码（1、不要做你不需要做的工作/2、如果可以避免，请不要分配内存）
 *          1、避免创建不必要的对象 对象创建永远不是免费的
 *          2、首选静态（这里说的是特定情景） 如果您不需要访问对象的字段，请使您的方法保持静态。调用速度将提高约15％-20％
 *          3、对常量使用static final 此优化仅适用于基本类型和String常量
 *          4、使用增强的for循环语法 增强for循环（for-each）可用于实现Iterable接口和数组的集合。
 *              （增强的for循环语法将完全等效于显式迭代器用法。）
 *          5、避免使用浮点数 根据经验，浮点数比Android设备上的整数慢约2倍
 */
public class Optimization {




}
